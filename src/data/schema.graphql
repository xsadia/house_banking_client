schema {
  query: Query
  mutation: MutationType
}

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input AddResponsableInput {
  houseHoldId: ID!
  expenseId: ID!
  userId: ID!
  clientMutationId: String
}

type AddResponsablePayload {
  success: Boolean
  error: String
  clientMutationId: String
}

input CreateExpenseInput {
  houseHoldId: ID!
  name: String!
  price: Float!
  clientMutationId: String
}

type CreateExpensePayload {
  expense: ExpenseEdge
  error: String
  clientMutationId: String
}

input CreateHouseHoldInput {
  houseHoldName: String!
  clientMutationId: String
}

type CreateHouseHoldPayload {
  houseHold: HouseHoldEdge
  error: String
  clientMutationId: String
}

input CreateUserInput {
  email: String!
  username: String!
  password: String!
  confirmPassword: String!
  monthlyWage: Float!
  clientMutationId: String
}

type CreateUserPayload {
  me: User
  token: String
  error: String
  clientMutationId: String
}

"""ExpenseType"""
type Expense implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  price: Float
  responsable: User
  belongsTo: HouseHold
}

"""A connection to a list of items."""
type ExpenseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExpenseEdge]
}

"""An edge in a connection."""
type ExpenseEdge {
  """The item at the end of the edge"""
  node: Expense

  """A cursor for use in pagination"""
  cursor: String!
}

input GenerateInviteInput {
  isExpirable: Boolean!
  houseHoldId: ID!
  clientMutationId: String
}

type GenerateInvitePayload {
  houseHold: HouseHold
  error: String
  clientMutationId: String
}

"""HouseHoldType"""
type HouseHold implements Node {
  """The ID of an object"""
  id: ID!
  houseChief: User
  houseHoldName: String
  totalRevenue: Float
  residents(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserConnection
  expenses(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ExpenseConnection
  inviteCode: String
  inviteCodeExpirationDate: String
  createdAt: String
  updatedAt: String
  deletedAt: String
}

"""A connection to a list of items."""
type HouseHoldConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HouseHoldEdge]
}

"""An edge in a connection."""
type HouseHoldEdge {
  """The item at the end of the edge"""
  node: HouseHold

  """A cursor for use in pagination"""
  cursor: String!
}

input JoinHouseHoldInput {
  inviteCode: String!
  clientMutationId: String
}

type JoinHouseHoldPayload {
  success: Boolean
  error: String
  clientMutationId: String
}

input LoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginPayload {
  me: User
  token: String
  error: String
  clientMutationId: String
}

"""Root of all mutations"""
type MutationType {
  """Create user mutation"""
  CreateUserMutation(input: CreateUserInput!): CreateUserPayload

  """Login mutation"""
  LoginMutation(input: LoginInput!): LoginPayload

  """Create household mutation"""
  CreateHouseHoldMutation(input: CreateHouseHoldInput!): CreateHouseHoldPayload

  """Generate invite mutation"""
  GenerateInviteMutation(input: GenerateInviteInput!): GenerateInvitePayload

  """Join household mutation"""
  JoinHouseHoldMutation(input: JoinHouseHoldInput!): JoinHouseHoldPayload

  """Create expense mutation"""
  CreateExpenseMutation(input: CreateExpenseInput!): CreateExpensePayload

  """Add responsable mutation"""
  AddResponsableMutation(input: AddResponsableInput!): AddResponsablePayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Root of all queries"""
type Query {
  hi: String
  me: User
  userHouseHolds(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): HouseHoldConnection
  houseHoldById(id: ID!): HouseHold
  userExpenses(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ExpenseConnection
}

"""UserType"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  username: String
  email: String
  password: String
  monthlyWage: Float
  houseHolds(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): HouseHoldConnection
  createdAt: String
  updatedAt: String
  deletedAt: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

